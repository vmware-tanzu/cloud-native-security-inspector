// Copyright 2022 VMware, Inc.
// SPDX-License-Identifier: Apache-2.0
// Code generated by go-swagger; DO NOT EDIT.

package assessment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetNSAssessmentParams creates a new GetNSAssessmentParams object
// with the default values initialized.
func NewGetNSAssessmentParams() *GetNSAssessmentParams {
	var ()
	return &GetNSAssessmentParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetNSAssessmentParamsWithTimeout creates a new GetNSAssessmentParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetNSAssessmentParamsWithTimeout(timeout time.Duration) *GetNSAssessmentParams {
	var ()
	return &GetNSAssessmentParams{

		timeout: timeout,
	}
}

// NewGetNSAssessmentParamsWithContext creates a new GetNSAssessmentParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetNSAssessmentParamsWithContext(ctx context.Context) *GetNSAssessmentParams {
	var ()
	return &GetNSAssessmentParams{

		Context: ctx,
	}
}

// NewGetNSAssessmentParamsWithHTTPClient creates a new GetNSAssessmentParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetNSAssessmentParamsWithHTTPClient(client *http.Client) *GetNSAssessmentParams {
	var ()
	return &GetNSAssessmentParams{
		HTTPClient: client,
	}
}

/*
GetNSAssessmentParams contains all the parameters to send to the API endpoint
for the get n s assessment operation typically these are written to a http.Request
*/
type GetNSAssessmentParams struct {

	/*Ns
	  namespace name

	*/
	Ns string
	/*Policy
	  inspection policy name

	*/
	Policy string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get n s assessment params
func (o *GetNSAssessmentParams) WithTimeout(timeout time.Duration) *GetNSAssessmentParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get n s assessment params
func (o *GetNSAssessmentParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get n s assessment params
func (o *GetNSAssessmentParams) WithContext(ctx context.Context) *GetNSAssessmentParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get n s assessment params
func (o *GetNSAssessmentParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get n s assessment params
func (o *GetNSAssessmentParams) WithHTTPClient(client *http.Client) *GetNSAssessmentParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get n s assessment params
func (o *GetNSAssessmentParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithNs adds the ns to the get n s assessment params
func (o *GetNSAssessmentParams) WithNs(ns string) *GetNSAssessmentParams {
	o.SetNs(ns)
	return o
}

// SetNs adds the ns to the get n s assessment params
func (o *GetNSAssessmentParams) SetNs(ns string) {
	o.Ns = ns
}

// WithPolicy adds the policy to the get n s assessment params
func (o *GetNSAssessmentParams) WithPolicy(policy string) *GetNSAssessmentParams {
	o.SetPolicy(policy)
	return o
}

// SetPolicy adds the policy to the get n s assessment params
func (o *GetNSAssessmentParams) SetPolicy(policy string) {
	o.Policy = policy
}

// WriteToRequest writes these params to a swagger request
func (o *GetNSAssessmentParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param ns
	if err := r.SetPathParam("ns", o.Ns); err != nil {
		return err
	}

	// path param policy
	if err := r.SetPathParam("policy", o.Policy); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
